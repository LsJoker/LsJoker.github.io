<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[原型]]></title>
    <url>%2F2017%2F09%2F02%2F%E5%8E%9F%E5%9E%8B%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[JavaScript 原型（面向对象）]]></title>
    <url>%2F2017%2F08%2F30%2FJs%E5%8E%9F%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[web设计最重要的事网页脚本编程，那么Js就是最终要的工具。什么是Js？即JavaScript，一种专为网页交互设计的语言，且面向对象。 什么是面向对象？？当然不是下图的面向对象哈 什么是面向对象？？ 面向对象程序设计（英语：Object-oriented programming，缩写：OOP）是种具有对象概念的程序编程范型，同时也是一种程序开发的方法。它可能包含数据、属性、代码与方法。对象则指的是类的实例。它将对象作为程序的基本单元，将程序和数据封装其中，以提高软件的重用性、灵活性和扩展性，对象里的程序可以访问及经常修改对象相关连的数据。在面向对象程序编程里，计算机程序会被设计成彼此相关的对象。面向对象是把构成问题事务分解成各个对象，建立对象的目的不是为了完成一个步骤，而是为了描叙某个事物在整个解决问题的步骤中的行为。面向对象是一种思维方法面向对象是一种编程方法面向对象并不只针对某一种编程语言 面向对象的三大特征： 封装也就是把客观事物封装成抽象的类或具体的对象，并且类或对象可以把自己的数据和方法只让可信的类或者对象操作，对不可信的进行信息隐藏。 继承可以让某个类型的对象获得另一个类型的对象的属性的方 多态不同实例的相同方法在不同情形有不同表现形式。多态机制使具有不同内部结构的对象可以共享相同的外部接口。 面向对象的优点： 结构清晰，程序便于模块化，结构化，抽象化，更加符合人类的思维方式； 封装性，将事务高度抽象，从而便于流程中的行为分析，也便于操作和自省； 容易扩展，代码重用率高，可继承，可覆盖； 实现简单，可有效地减少程序的维护工作量，软件开发效率高。 缺点是： 效率低，面向对象在面向过程的基础上高度抽象，从而和代码底层的直接交互非常少机会，从而不适合底层开发和游戏甚至多媒体开发； 复杂性，对于事务开发而言，事务本身是面向过程的，过度的封装导致事务本身的复杂性提高。 JavaScript的面向对象在JavaScript中（ES6之前）没有类的概念，那在JavaScript中怎么才能new出一个对象呢。JavaScript是基于原型的面向对象，在JavaScript中一切皆对象。就生成对象的方法就有很多种，下面将一一介绍。 1.用字面量来创建一个对象: var person = { name:&quot;孙大神&quot;, age:&quot;1000&quot;, seeBook:function(){ alert(&quot;看书&quot;); } } name : “孙大神” 一个键值对表示JavaScript对象的一个属性。 name是属性名， “孙大神” 属性值。 属性可以是任意类型的。可以包括简单数据类型，可以是对象，当然包括函数，一切函数都是对象。 当一个属性的值是函数的时候，我们更喜欢说这个属性为方法。 我们一般说person对象具有了一个方法seeBook. 将来访问seeBook的时候，也和调用一个函数是一样的，如 person.seeBook(); 接下来先看一下怎么访问对象的属性或方法。访问一个对象的属性，我们可以直接通过 对象.属性名 和 对象[属性名] 来访问。 console.log(person.name);//访问person对象的 name属性值 person.age = 555;//修改person对象的 age 属性 person.seeBook();//既然是调用方法(函数) 则一定还要加()来表示方法的调用,上文提过 alert(person[&quot;name&quot;]);//等同于alert(person.name); 注意：两种使用方式有一些不同的地方：对象.属性名的方式，只适合知道了属性的名字，可以直接写。如： person.age 。如果属性名是个变量，则这种方法无效， 对象.变量名则会出现语法错误。对象[属性名]，这种方式使用无限制。如果是字符串常量，则应该用””引起来，如果是变量，可以直接使用。 对象的创建方式1.使用关键字new来创建，new Object(),注意O大写： &lt;script type=&quot;text/javascript&quot;&gt; //使用object创建一个对象 完全等同于 var person = {}; var person = new Object(); //给对象添加属性 person.name = &quot;猪八戒&quot;; //给对象添加方法 person.look = function () { alert(&quot;肥头大耳朵~~~&quot;) }； &lt;/script&gt; 当然这种方式是很基础的一种，读者可以想一想，当你需要创建很多相似的对象的时候我们该怎么办？ 2.工厂模式：顾名思义，是像工厂一样的批量生产对象，这就可以解决1中留下的问题： &lt;script type=&quot;text/javascript&quot;&gt; function createPerson(name, age, job) { var per = new Object(); per.name = name; per.age = age; per.look = look; per.sayName = function() { alert(this.name); }; return per; } var person1 = createPerson(&quot;孙悟空&quot;, 29, &quot;猴子&quot;); var person2 = createPerson(&quot;猪八戒&quot;, 27, &quot;肥头大耳&quot;); &lt;/script&gt; 发现问题了吗？这种方式虽然很好的解决了对象的批量创建，但是没有解决对象识别问题（即无法分辨一个对象的类型） 3.构造函数模式：这种模式，创建一些原生对象的时候，比如Array、Object就是调用的他们的构造函数。不废话，直接上代码： &lt;script type=&quot;text/javascript&quot;&gt; function Person (name, age, sex) { this.name = name; this.age = age; this.look = look; this.description = function () { alert(this.name + &quot;是&quot; + this.look); } } var p1 = new Person(&quot;孙悟空&quot;, 30, &quot;猴子&quot;); p1.description(); //孙悟空是猴子 var p1 = new Person(&quot;猪八戒&quot;, 30, &quot;肥头大耳朵&quot;); p1.description(); //猪八戒是肥头大耳朵 alert(p1 instanceof Person); //true，是它的实例 &lt;/script&gt; 使用构造函数创建对象，必须使用关键字new，后面跟着构造函数的名，根据需要传入相应的参数。 用构造函数的原理： 创建出来一个新的对象，将构造函数的作用域赋给新对象。意味着这个时候 this就代表了这个新对象。 执行构造函数中的代码。 在本例中就是给新对象添加属性，并给属性初始化值。 构造函数执行完毕之后，默认返回新对象。 所以外面就可以使用个刚刚创建的新对象了。 构造函数与普通函数的关系： 他们都是函数。构造函数也是函数，也可以像普通的函数一样进行调用。 做普通函数调用的时候，因为没有创建新的对象，所以this其实指向了window对象； 构造函数和普通函数仅仅也仅仅是调用方式的不同。也就是说，随便一个函数你如果用new 的方式去使用，那么他就是一个构造函数。为了区别开来，如果一个函数想作为构造函数，作为国际惯例，最好把这个函数的首字母大写，这是代码书写规范，希望大家都能写出漂亮的代码。 如果文章对你有所帮助，那么太好了！❤由于本人水平有限，如有错误，欢迎大家指正。如果你在操作过程中发现一些没有讲到的错误或者问题，欢迎微信或者微博留言，一起探讨，共同学习进步！]]></content>
      <categories>
        <category>原型</category>
      </categories>
      <tags>
        <tag>对象</tag>
      </tags>
  </entry>
</search>
